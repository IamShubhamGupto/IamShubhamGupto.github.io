<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://iamshubhamgupto.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://iamshubhamgupto.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-22T16:31:11+00:00</updated><id>https://iamshubhamgupto.github.io/feed.xml</id><title type="html">blank</title><entry><title type="html">Google Sheets macro-scripts</title><link href="https://iamshubhamgupto.github.io/blog/2023/google-sheet-macro-scripts/" rel="alternate" type="text/html" title="Google Sheets macro-scripts"/><published>2023-03-05T00:00:00+00:00</published><updated>2023-03-05T00:00:00+00:00</updated><id>https://iamshubhamgupto.github.io/blog/2023/google-sheet-macro-scripts</id><content type="html" xml:base="https://iamshubhamgupto.github.io/blog/2023/google-sheet-macro-scripts/"><![CDATA[<p>Todayâ€™s post is about how my flatmates and I use google sheets to track regular house chores and how my coding skills simplifies this process slightly more. At this point, it may seem like I like to blog exclusively about automation of simple tasks but I actually do have more interests!!ðŸ¤¡</p> <h2 id="the-problem">The Problem</h2> <p>Nobody likes to get their hands dirty and take out the trash, fill the dishwasher with the dirty dishes or even has the time to periodically clean the whole house. Atleast this describes us in a single sentence. Before tracking chores on the sheet, we would do these tasks randomly and nobody could actually account for their actions. It would be seem like we were responsible for ourselves and others when the responsibility should be fairly distributed.</p> <h2 id="the-solution">The Solution</h2> <p>We agreed to use Google Sheets to track all the household tasks. We would do these tasks in a cyclic order and then fill in details such as <code class="language-plaintext highlighter-rouge">date</code> and <code class="language-plaintext highlighter-rouge">cleaned by</code> on sheet. This solved the ambiguity of who is supposed to clear the trash or empty the dishwasher and we had a smooth system for the remaining semester. However, this system did not carry over to our current semester.</p> <h2 id="the-problem--part-2">The Problem : part 2</h2> <p>The three of us this semester have more demanding and polar schedules resulting in us catching up just once every week compared to almost everyday during the previous semester. A bigger side effect of such schedules is we miss checking the sheet for our turn or complete the task and then forget to update the sheet. This results in the trash overflowing again and the sink packed with dirty dishes.</p> <h2 id="the-real-solution">The REAL solution</h2> <p>This is where I come in. A couple of weeks back one of my flatmates came up with the idea of setting reminders based on who last edited the google sheet. Having very little time to investigate, the idea was soon dropped and made no progress.</p> <p>Recently, I have been doing my tasks in a timely manner but I keep forgetting to update the sheet, resulting in the next flatmate to think its still my turn. To address this problem, I brought back the reminder idea based on the google sheet using <a href="https://developers.google.com/apps-script">Apps Script</a>.</p> <h3 id="pseudo-code">Pseudo code</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">clearDishwasher</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nx">current_sheet</span> <span class="o">=</span> <span class="nf">getCurrentSheet</span><span class="p">();</span>
    <span class="nx">current_range</span> <span class="o">=</span> <span class="nx">current_sheet</span><span class="p">.</span><span class="nf">getCurrentRange</span><span class="p">();</span>
    <span class="nx">current_column</span> <span class="o">=</span> <span class="nx">current_range</span><span class="p">.</span><span class="nf">getColumn</span><span class="p">();</span>
    <span class="c1">// emptied by is in column 3</span>
    <span class="k">if </span><span class="p">(</span> <span class="nx">current_column</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="nx">name</span> <span class="o">=</span> <span class="nx">current_sheet</span><span class="p">.</span><span class="nf">getRange</span><span class="p">(</span><span class="nx">sheet</span><span class="p">.</span><span class="nf">getLastRow</span><span class="p">(),</span> <span class="nx">current_column</span><span class="p">).</span><span class="nf">getValue</span><span class="p">();</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">name</span> <span class="o">==</span> <span class="dl">'</span><span class="s1">name1</span><span class="dl">'</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="nx">MailApp</span><span class="p">.</span><span class="nf">sendEmail</span><span class="p">(</span>
                <span class="p">{</span>
                    <span class="na">to</span><span class="p">:</span> <span class="dl">"</span><span class="s2">email1@haha.com</span><span class="dl">"</span><span class="p">,</span>
                    <span class="na">subject</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Time to Clear Dishwasher!!!</span><span class="dl">"</span><span class="p">,</span>
                    <span class="na">body</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Hi name1, this is an automated mail to inform you that name3 has cleared the dishwasher, its your turn next!!</span><span class="dl">"</span>
                <span class="p">}</span>
            <span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">name</span> <span class="o">==</span> <span class="dl">'</span><span class="s1">name2</span><span class="dl">'</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="nx">MailApp</span><span class="p">.</span><span class="nf">sendEmail</span><span class="p">(</span>
                <span class="p">{</span>
                    <span class="na">to</span><span class="p">:</span> <span class="dl">"</span><span class="s2">email2@haha.com</span><span class="dl">"</span><span class="p">,</span>
                    <span class="na">subject</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Time to Clear Dishwasher!!!</span><span class="dl">"</span><span class="p">,</span>
                    <span class="na">body</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Hi name2, this is an automated mail to inform you that name1 has cleared the dishwasher, its your turn next!!</span><span class="dl">"</span>
                <span class="p">}</span>
            <span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> 
        <span class="p">{</span>
            <span class="nx">MailApp</span><span class="p">.</span><span class="nf">sendEmail</span><span class="p">(</span>
                <span class="p">{</span>
                    <span class="na">to</span><span class="p">:</span> <span class="dl">"</span><span class="s2">email3@haha.com</span><span class="dl">"</span><span class="p">,</span>
                    <span class="na">subject</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Time to Clear Dishwasher!!!</span><span class="dl">"</span><span class="p">,</span>
                    <span class="na">body</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Hi name3, this is an automated mail to inform you that name2 has cleared the dishwasher, its your turn next!!</span><span class="dl">"</span>
                <span class="p">}</span>
            <span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="triggers">Triggers</h3> <p>Coding it was not so bad. Especially now that we have ChatGPT ðŸŒš. However, we need to tell sheets when to run our script otherwise its back to manually running the notifications again. For this, under the <strong>Triggers</strong> tab on the left of the Apps Script page, we specify when the function is to be executed. Here are my settings:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Function to run: clearDishwasher,
Which runs at deployment: Head,
Select event source: From spreadsheet,
Select event type: On change,
</code></pre></div></div> <p>The above settings basically tells google sheet to call <code class="language-plaintext highlighter-rouge">clearDishwasher</code> whenever there is a change in the spreadsheet.</p> <h2 id="conclusion">Conclusion</h2> <p>We now have a system that tracks who has completed which household task and also give us reminders when its our turn to do the task. Since the reminder system was just added, we still need to use it and see how viable it is. The entire script can be found here <a href="https://github.com/IamShubhamGupto/Apps-script"> Apps Script </a>.</p>]]></content><author><name></name></author><category term="code"/><category term="automation"/><category term="code"/><category term="apps-script"/><category term="google-sheets"/><category term="automation"/><summary type="html"><![CDATA[Automatic notifications for Google sheet changes]]></summary></entry><entry><title type="html">Automation with web scrapping</title><link href="https://iamshubhamgupto.github.io/blog/2023/automation-with-web-scrapping/" rel="alternate" type="text/html" title="Automation with web scrapping"/><published>2023-02-12T00:00:00+00:00</published><updated>2023-02-12T00:00:00+00:00</updated><id>https://iamshubhamgupto.github.io/blog/2023/automation-with-web-scrapping</id><content type="html" xml:base="https://iamshubhamgupto.github.io/blog/2023/automation-with-web-scrapping/"><![CDATA[<p>My work with NYU Marron requires me to automate fence, wall and building annotation on Google Street View images. While this project can be an entire blog separately, I wanted to write specifically about the recent progress I had made. There is a publically available dataset <a href="https://www.cityscapes-dataset.com">Cityscapes</a> that consists of per-pixel annotations of street videos of 50 cities in and around Germany. While this is not ideal as we are dealing with street view images of New York, it should be a good starting point. Once we establish a baseline on pretrained models from other cities, we could then decide if we need to custom train a model of our own based on the performance.</p> <p>Since Cityscapes is used a benchmark for lot of the segmentation tasks in Computer Vision, the website also hosts information on methodologies and their performance per class label. This is very interesting as currently, we just need to a model / method that can segment fences, walls and buildings with a good degree of confidence.</p> <p>However, scrolling through the entire list just to find the best model for these classes can be very time consuming and requires a lot of effort. What if we could get someone to do this task? Using python modules such as <code class="language-plaintext highlighter-rouge">bs4.BeautifulSoup</code> and <code class="language-plaintext highlighter-rouge">requests</code>, we can complete hours of tedious work in a couple of minutes.</p> <h2 id="workflow">Workflow</h2> <h3 id="read-the-base-site">Read the base site</h3> <p>We first want to download the page of interest and loaded into memory. We achieve this using <code class="language-plaintext highlighter-rouge">requests</code> and parse the content using <code class="language-plaintext highlighter-rouge">bs4.BeautifulSoup</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>
<span class="kn">from</span> <span class="n">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://www.cityscapes-dataset.com/benchmarks/#scene-labeling-task</span><span class="sh">"</span>

<span class="c1"># Make a GET request to fetch the web page
</span><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>

<span class="c1"># Parse the HTML content of the page
</span><span class="n">soup</span> <span class="o">=</span> <span class="nc">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="sh">"</span><span class="s">html.parser</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">soup</span><span class="p">)</span>
</code></pre></div></div> <h3 id="parse-the-site">Parse the site</h3> <p><code class="language-plaintext highlighter-rouge">BeautifulSoup</code> class comes loaded with multiple functions that we will be using to extract useful information very straightforward. We know we are interested in the methods presented in the tabulated format. Hence, we ask BeautifulSoup to fetch all elements and their children that contain the tag <code class="language-plaintext highlighter-rouge">&lt;tr&gt;</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Find the table with the required data
</span><span class="n">table</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">table</span><span class="sh">"</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="sh">"</span><span class="s">tablepress tablepress-id-2 tablepress-row-details tablepress-responsive</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Extract the data from the table and store it in a list of dictionaries
</span><span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">rows</span> <span class="o">=</span> <span class="n">table</span><span class="p">.</span><span class="nf">find_all</span><span class="p">(</span><span class="sh">"</span><span class="s">tr</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div> <h3 id="search-for-the-keywords-you-want">Search for the keywords you want</h3> <p>We notice that each row only contains generic information that talks about the overall performance and modes used. The real data is hidden away in a hyperlink that goes to the method submission page. Our workflow now would be to:</p> <ul> <li>Find the model submission link for each method</li> <li>Load the contents of the submission page locally</li> <li>Filter content of the page based on a few keywords like â€˜nameâ€™, â€˜buildingâ€™, â€˜fenceâ€™ etc</li> </ul> <p>This step may take a while depending on the page youre loading. If youre following the blog for the exact same site, the answer is below. Otherwise, Iâ€™d recommend to code this section iteratively by looking at the output generated at each step.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">interests</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">building</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">fence</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wall</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">vegetation</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">link</span><span class="sh">'</span><span class="p">]</span>
<span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">interests</span><span class="p">)</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="n">cols</span> <span class="o">=</span> <span class="n">row</span><span class="p">.</span><span class="nf">find_all</span><span class="p">(</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">,</span> <span class="n">href</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="n">detail_links</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">cols</span> <span class="k">if</span> <span class="sh">"</span><span class="s">https://www.cityscapes-dataset.com/method-details/?submissionID=</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">x</span><span class="p">[</span><span class="sh">'</span><span class="s">href</span><span class="sh">'</span><span class="p">]]</span>
    
    <span class="k">for</span> <span class="n">link</span> <span class="ow">in</span> <span class="n">detail_links</span><span class="p">:</span>
        <span class="n">row</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">detail_response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">link</span><span class="p">[</span><span class="sh">'</span><span class="s">href</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">detail_soup</span> <span class="o">=</span> <span class="nc">BeautifulSoup</span><span class="p">(</span><span class="n">detail_response</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="sh">"</span><span class="s">html.parser</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">table_datas</span> <span class="o">=</span> <span class="p">[</span> <span class="n">i</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">detail_soup</span><span class="p">.</span><span class="nf">find_all</span><span class="p">(</span><span class="sh">"</span><span class="s">td</span><span class="sh">"</span><span class="p">)]</span>

        <span class="k">for</span> <span class="n">interest</span> <span class="ow">in</span> <span class="n">interests</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">interest</span> <span class="ow">in</span> <span class="n">table_datas</span><span class="p">:</span>
                 <span class="n">row</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">table_datas</span><span class="p">[</span><span class="n">table_datas</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">interest</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">row</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">link</span><span class="p">[</span><span class="sh">'</span><span class="s">href</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
                
<span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div> <h3 id="format-and-store-data">Format and store data</h3> <p>Now that you have the data you were scouting for, its time to store it in a human presentable format. I use the <code class="language-plaintext highlighter-rouge">pandas</code> library to first convert it into a dataframe and then into an excel spreadsheet. Now further analysis can be carried out using the tools of your choice.</p> <h2 id="conclusion">Conclusion</h2> <p>You just coded a simple web-scrapper using python to collect the data of your interest. I hope the guide was helpful, do reachout to me via mail if you have any ideas for improving my blogging style. This is something I started recently and am working on to improve. The code for this blog should be up on my GitHub hopefully before the next weekend.</p>]]></content><author><name></name></author><category term="code"/><category term="automation"/><category term="code"/><category term="github"/><category term="python"/><category term="web-scrapping"/><summary type="html"><![CDATA[Simplying data collection from web sites using Python web scrapping]]></summary></entry><entry><title type="html">Playing with actions</title><link href="https://iamshubhamgupto.github.io/blog/2023/playing-with-actions/" rel="alternate" type="text/html" title="Playing with actions"/><published>2023-01-23T00:00:00+00:00</published><updated>2023-01-23T00:00:00+00:00</updated><id>https://iamshubhamgupto.github.io/blog/2023/playing-with-actions</id><content type="html" xml:base="https://iamshubhamgupto.github.io/blog/2023/playing-with-actions/"><![CDATA[<p>In the last couple of days, I wanted to make most of free time of my winter break. I decided to work on my automation skills, something I have always been keeping aside as it didnâ€™t seem very important. But after pushing this aside for months, I have finally started and hopefully continue building on this project.</p> <p>To summarize, I currently have implemented two workflows:</p> <ol> <li> Automatic release creation</li> <li> Automatic next sprint branch creation</li> </ol> <p>Both these tasks are something I observed were recurring <b>bottlenecks</b> when working with teams during internships or even projects with friends. My implementations are very basic but I should be able to iterate and build more resilient workflows as I understand this concept better.</p> <p>The code is available <a href="https://github.com/IamShubhamGupto/playing-with-actions">here</a></p> <p>Hope you enjoyed my first blog (: Also, something I will be improving on iteratively!</p> ]]></content><author><name></name></author><category term="code"/><category term="automation"/><category term="code"/><category term="github"/><summary type="html"><![CDATA[Learning Github Actions by building simple agile automation tasks]]></summary></entry></feed>